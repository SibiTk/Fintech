// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cache_service/internal/handler"
	"cache_service/internal/conf"
	"cache_service/internal/data"
	"cache_service/internal/server"
	"cache_service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

func wireApp(confServer *conf.Server, confData *conf.Data, internalConf *conf.InternalConf, logger log.Logger) (*kratos.App, func(), error) {
	universalClient := data.NewRedisServer(internalConf)
	 greeterUsecase:= handler.NewCacheService(universalClient)
	cacheServiceService := service.NewBalanceCacheServiceService(greeterUsecase)
	grpcServer := server.NewGRPCServer(confServer, cacheServiceService, logger)
	httpServer := server.NewHTTPServer(confServer, cacheServiceService)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
	}, nil
}
// // Injectors from wire.go:

// // wireApp init kratos application.
// func wireApp(confServer *conf.Server, confData *conf.Data,  internalConf *conf.InternalConf ,logger log.Logger) (*kratos.App, func(), error) {
// 	dataData, cleanup, err := data.NewData(confData, logger)
// 	if err != nil {
// 		return nil, nil, err
// 	}
// 	greeterRepo := data.(dataData, logger,)
// 	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
// 	greeterService := service.NewGreeterService(greeterUsecase)
// 	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
// 	httpServer := server.NewHTTPServer(confServer, greeterService, logger)
// 	app := newApp(logger, grpcServer, httpServer)
// 	return app, func() {
// 		cleanup()
// 	}, nil
// }

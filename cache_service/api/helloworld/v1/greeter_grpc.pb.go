// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BalanceCacheService_GetBalance_FullMethodName    = "/helloworld.v1.BalanceCacheService/GetBalance"
	BalanceCacheService_SetBalance_FullMethodName    = "/helloworld.v1.BalanceCacheService/SetBalance"
	BalanceCacheService_DeleteBalance_FullMethodName = "/helloworld.v1.BalanceCacheService/DeleteBalance"
)

// BalanceCacheServiceClient is the client API for BalanceCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceCacheServiceClient interface {
	GetBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	SetBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type balanceCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceCacheServiceClient(cc grpc.ClientConnInterface) BalanceCacheServiceClient {
	return &balanceCacheServiceClient{cc}
}

func (c *balanceCacheServiceClient) GetBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheResponse)
	err := c.cc.Invoke(ctx, BalanceCacheService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceCacheServiceClient) SetBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BalanceCacheService_SetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceCacheServiceClient) DeleteBalance(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BalanceCacheService_DeleteBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceCacheServiceServer is the server API for BalanceCacheService service.
// All implementations must embed UnimplementedBalanceCacheServiceServer
// for forward compatibility.
type BalanceCacheServiceServer interface {
	GetBalance(context.Context, *CacheRequest) (*CacheResponse, error)
	SetBalance(context.Context, *CacheRequest) (*emptypb.Empty, error)
	DeleteBalance(context.Context, *CacheRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBalanceCacheServiceServer()
}

// UnimplementedBalanceCacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBalanceCacheServiceServer struct{}

func (UnimplementedBalanceCacheServiceServer) GetBalance(context.Context, *CacheRequest) (*CacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBalanceCacheServiceServer) SetBalance(context.Context, *CacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBalance not implemented")
}
func (UnimplementedBalanceCacheServiceServer) DeleteBalance(context.Context, *CacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBalance not implemented")
}
func (UnimplementedBalanceCacheServiceServer) mustEmbedUnimplementedBalanceCacheServiceServer() {}
func (UnimplementedBalanceCacheServiceServer) testEmbeddedByValue()                             {}

// UnsafeBalanceCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceCacheServiceServer will
// result in compilation errors.
type UnsafeBalanceCacheServiceServer interface {
	mustEmbedUnimplementedBalanceCacheServiceServer()
}

func RegisterBalanceCacheServiceServer(s grpc.ServiceRegistrar, srv BalanceCacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedBalanceCacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BalanceCacheService_ServiceDesc, srv)
}

func _BalanceCacheService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceCacheServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceCacheService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceCacheServiceServer).GetBalance(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceCacheService_SetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceCacheServiceServer).SetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceCacheService_SetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceCacheServiceServer).SetBalance(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceCacheService_DeleteBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceCacheServiceServer).DeleteBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceCacheService_DeleteBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceCacheServiceServer).DeleteBalance(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceCacheService_ServiceDesc is the grpc.ServiceDesc for BalanceCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.BalanceCacheService",
	HandlerType: (*BalanceCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _BalanceCacheService_GetBalance_Handler,
		},
		{
			MethodName: "SetBalance",
			Handler:    _BalanceCacheService_SetBalance_Handler,
		},
		{
			MethodName: "DeleteBalance",
			Handler:    _BalanceCacheService_DeleteBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/greeter.proto",
}

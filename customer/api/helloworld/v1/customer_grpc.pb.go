// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerManager_CreateCustomer_FullMethodName  = "/customermanager.v1.CustomerManager/CreateCustomer"
	CustomerManager_UpdateCustomer_FullMethodName  = "/customermanager.v1.CustomerManager/UpdateCustomer"
	CustomerManager_DeleteCustomer_FullMethodName  = "/customermanager.v1.CustomerManager/DeleteCustomer"
	CustomerManager_DisplayCustomer_FullMethodName = "/customermanager.v1.CustomerManager/DisplayCustomer"
)

// CustomerManagerClient is the client API for CustomerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerManagerClient interface {
	// Customer endpoints
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerReply, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerReply, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerReply, error)
	DisplayCustomer(ctx context.Context, in *FindCustomerByIdRequest, opts ...grpc.CallOption) (*FindCustomerByIdReply, error)
}

type customerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerManagerClient(cc grpc.ClientConnInterface) CustomerManagerClient {
	return &customerManagerClient{cc}
}

func (c *customerManagerClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerReply)
	err := c.cc.Invoke(ctx, CustomerManager_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerManagerClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerReply)
	err := c.cc.Invoke(ctx, CustomerManager_UpdateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerManagerClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomerReply)
	err := c.cc.Invoke(ctx, CustomerManager_DeleteCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerManagerClient) DisplayCustomer(ctx context.Context, in *FindCustomerByIdRequest, opts ...grpc.CallOption) (*FindCustomerByIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCustomerByIdReply)
	err := c.cc.Invoke(ctx, CustomerManager_DisplayCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerManagerServer is the server API for CustomerManager service.
// All implementations must embed UnimplementedCustomerManagerServer
// for forward compatibility.
type CustomerManagerServer interface {
	// Customer endpoints
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerReply, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerReply, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerReply, error)
	DisplayCustomer(context.Context, *FindCustomerByIdRequest) (*FindCustomerByIdReply, error)
	mustEmbedUnimplementedCustomerManagerServer()
}

// UnimplementedCustomerManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerManagerServer struct{}

func (UnimplementedCustomerManagerServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerManagerServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerManagerServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerManagerServer) DisplayCustomer(context.Context, *FindCustomerByIdRequest) (*FindCustomerByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayCustomer not implemented")
}
func (UnimplementedCustomerManagerServer) mustEmbedUnimplementedCustomerManagerServer() {}
func (UnimplementedCustomerManagerServer) testEmbeddedByValue()                         {}

// UnsafeCustomerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerManagerServer will
// result in compilation errors.
type UnsafeCustomerManagerServer interface {
	mustEmbedUnimplementedCustomerManagerServer()
}

func RegisterCustomerManagerServer(s grpc.ServiceRegistrar, srv CustomerManagerServer) {
	// If the following call pancis, it indicates UnimplementedCustomerManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerManager_ServiceDesc, srv)
}

func _CustomerManager_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerManagerServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerManager_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerManagerServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerManager_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerManagerServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerManager_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerManagerServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerManager_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerManagerServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerManager_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerManagerServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerManager_DisplayCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerManagerServer).DisplayCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerManager_DisplayCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerManagerServer).DisplayCustomer(ctx, req.(*FindCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerManager_ServiceDesc is the grpc.ServiceDesc for CustomerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customermanager.v1.CustomerManager",
	HandlerType: (*CustomerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerManager_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerManager_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CustomerManager_DeleteCustomer_Handler,
		},
		{
			MethodName: "DisplayCustomer",
			Handler:    _CustomerManager_DisplayCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/greeter.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCustomerManagerCreateCustomer = "/customermanager.v1.CustomerManager/CreateCustomer"
const OperationCustomerManagerDeleteCustomer = "/customermanager.v1.CustomerManager/DeleteCustomer"
const OperationCustomerManagerDisplayCustomer = "/customermanager.v1.CustomerManager/DisplayCustomer"
const OperationCustomerManagerUpdateCustomer = "/customermanager.v1.CustomerManager/UpdateCustomer"

type CustomerManagerHTTPServer interface {
	// CreateCustomer Customer endpoints
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerReply, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*DeleteCustomerReply, error)
	DisplayCustomer(context.Context, *FindCustomerByIdRequest) (*FindCustomerByIdReply, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerReply, error)
}

func RegisterCustomerManagerHTTPServer(s *http.Server, srv CustomerManagerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/customers", _CustomerManager_CreateCustomer0_HTTP_Handler(srv))
	r.POST("/customermanager.v1.CustomerManager/UpdateCustomer", _CustomerManager_UpdateCustomer0_HTTP_Handler(srv))
	r.DELETE("/v1/customers/{customer_id}", _CustomerManager_DeleteCustomer0_HTTP_Handler(srv))
	r.GET("/v1/customers/number/{customer_id}", _CustomerManager_DisplayCustomer0_HTTP_Handler(srv))
}

func _CustomerManager_CreateCustomer0_HTTP_Handler(srv CustomerManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerManagerCreateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomer(ctx, req.(*CreateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerManager_UpdateCustomer0_HTTP_Handler(srv CustomerManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCustomerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerManagerUpdateCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerManager_DeleteCustomer0_HTTP_Handler(srv CustomerManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerManagerDeleteCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerManager_DisplayCustomer0_HTTP_Handler(srv CustomerManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindCustomerByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCustomerManagerDisplayCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisplayCustomer(ctx, req.(*FindCustomerByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindCustomerByIdReply)
		return ctx.Result(200, reply)
	}
}

type CustomerManagerHTTPClient interface {
	CreateCustomer(ctx context.Context, req *CreateCustomerRequest, opts ...http.CallOption) (rsp *CreateCustomerReply, err error)
	DeleteCustomer(ctx context.Context, req *DeleteCustomerRequest, opts ...http.CallOption) (rsp *DeleteCustomerReply, err error)
	DisplayCustomer(ctx context.Context, req *FindCustomerByIdRequest, opts ...http.CallOption) (rsp *FindCustomerByIdReply, err error)
	UpdateCustomer(ctx context.Context, req *UpdateCustomerRequest, opts ...http.CallOption) (rsp *UpdateCustomerReply, err error)
}

type CustomerManagerHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerManagerHTTPClient(client *http.Client) CustomerManagerHTTPClient {
	return &CustomerManagerHTTPClientImpl{client}
}

func (c *CustomerManagerHTTPClientImpl) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...http.CallOption) (*CreateCustomerReply, error) {
	var out CreateCustomerReply
	pattern := "/v1/customers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerManagerCreateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerManagerHTTPClientImpl) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...http.CallOption) (*DeleteCustomerReply, error) {
	var out DeleteCustomerReply
	pattern := "/v1/customers/{customer_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerManagerDeleteCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerManagerHTTPClientImpl) DisplayCustomer(ctx context.Context, in *FindCustomerByIdRequest, opts ...http.CallOption) (*FindCustomerByIdReply, error) {
	var out FindCustomerByIdReply
	pattern := "/v1/customers/number/{customer_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCustomerManagerDisplayCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CustomerManagerHTTPClientImpl) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...http.CallOption) (*UpdateCustomerReply, error) {
	var out UpdateCustomerReply
	pattern := "/customermanager.v1.CustomerManager/UpdateCustomer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCustomerManagerUpdateCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

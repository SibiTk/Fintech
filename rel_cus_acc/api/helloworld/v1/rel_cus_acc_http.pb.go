// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/rel_cus_acc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelCusAccCreateRelation = "/helloworld.v1.RelCusAcc/CreateRelation"
const OperationRelCusAccDeleteRelation = "/helloworld.v1.RelCusAcc/DeleteRelation"
const OperationRelCusAccGetAllRelations = "/helloworld.v1.RelCusAcc/GetAllRelations"
const OperationRelCusAccGetRelationByAccount = "/helloworld.v1.RelCusAcc/GetRelationByAccount"
const OperationRelCusAccGetRelationsByCustomer = "/helloworld.v1.RelCusAcc/GetRelationsByCustomer"
const OperationRelCusAccUpdateRelation = "/helloworld.v1.RelCusAcc/UpdateRelation"

type RelCusAccHTTPServer interface {
	// CreateRelation Create a new customer-account relationship
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationReply, error)
	// DeleteRelation Delete relationship by ID
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationReply, error)
	// GetAllRelations Get all relationships
	GetAllRelations(context.Context, *GetAllRelationsRequest) (*GetAllRelationsReply, error)
	// GetRelationByAccount Get relationship by account ID
	GetRelationByAccount(context.Context, *GetRelationByAccountRequest) (*GetRelationByAccountReply, error)
	// GetRelationsByCustomer Get all relationships by customer ID
	GetRelationsByCustomer(context.Context, *GetRelationsByCustomerRequest) (*GetRelationsByCustomerReply, error)
	// UpdateRelation Update customer-account relationship
	UpdateRelation(context.Context, *UpdateRelationRequest) (*UpdateRelationReply, error)
}

func RegisterRelCusAccHTTPServer(s *http.Server, srv RelCusAccHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/rel-cus-acc", _RelCusAcc_CreateRelation0_HTTP_Handler(srv))
	r.PATCH("/v1/rel-cus-acc/{id}", _RelCusAcc_UpdateRelation0_HTTP_Handler(srv))
	r.DELETE("/v1/rel-cus-acc/{id}", _RelCusAcc_DeleteRelation0_HTTP_Handler(srv))
	r.GET("/v1/rel-cus-acc/customer/{customerId}", _RelCusAcc_GetRelationsByCustomer0_HTTP_Handler(srv))
	r.GET("/v1/rel-cus-acc/account/{accountId}", _RelCusAcc_GetRelationByAccount0_HTTP_Handler(srv))
	r.GET("/v1/rel-cus-acc", _RelCusAcc_GetAllRelations0_HTTP_Handler(srv))
}

func _RelCusAcc_CreateRelation0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRelationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccCreateRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRelation(ctx, req.(*CreateRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRelationReply)
		return ctx.Result(200, reply)
	}
}

func _RelCusAcc_UpdateRelation0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRelationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccUpdateRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRelation(ctx, req.(*UpdateRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRelationReply)
		return ctx.Result(200, reply)
	}
}

func _RelCusAcc_DeleteRelation0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRelationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccDeleteRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRelation(ctx, req.(*DeleteRelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRelationReply)
		return ctx.Result(200, reply)
	}
}

func _RelCusAcc_GetRelationsByCustomer0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRelationsByCustomerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccGetRelationsByCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRelationsByCustomer(ctx, req.(*GetRelationsByCustomerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRelationsByCustomerReply)
		return ctx.Result(200, reply)
	}
}

func _RelCusAcc_GetRelationByAccount0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRelationByAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccGetRelationByAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRelationByAccount(ctx, req.(*GetRelationByAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRelationByAccountReply)
		return ctx.Result(200, reply)
	}
}

func _RelCusAcc_GetAllRelations0_HTTP_Handler(srv RelCusAccHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllRelationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelCusAccGetAllRelations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllRelations(ctx, req.(*GetAllRelationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllRelationsReply)
		return ctx.Result(200, reply)
	}
}

type RelCusAccHTTPClient interface {
	CreateRelation(ctx context.Context, req *CreateRelationRequest, opts ...http.CallOption) (rsp *CreateRelationReply, err error)
	DeleteRelation(ctx context.Context, req *DeleteRelationRequest, opts ...http.CallOption) (rsp *DeleteRelationReply, err error)
	GetAllRelations(ctx context.Context, req *GetAllRelationsRequest, opts ...http.CallOption) (rsp *GetAllRelationsReply, err error)
	GetRelationByAccount(ctx context.Context, req *GetRelationByAccountRequest, opts ...http.CallOption) (rsp *GetRelationByAccountReply, err error)
	GetRelationsByCustomer(ctx context.Context, req *GetRelationsByCustomerRequest, opts ...http.CallOption) (rsp *GetRelationsByCustomerReply, err error)
	UpdateRelation(ctx context.Context, req *UpdateRelationRequest, opts ...http.CallOption) (rsp *UpdateRelationReply, err error)
}

type RelCusAccHTTPClientImpl struct {
	cc *http.Client
}

func NewRelCusAccHTTPClient(client *http.Client) RelCusAccHTTPClient {
	return &RelCusAccHTTPClientImpl{client}
}

func (c *RelCusAccHTTPClientImpl) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...http.CallOption) (*CreateRelationReply, error) {
	var out CreateRelationReply
	pattern := "/v1/rel-cus-acc"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelCusAccCreateRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelCusAccHTTPClientImpl) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...http.CallOption) (*DeleteRelationReply, error) {
	var out DeleteRelationReply
	pattern := "/v1/rel-cus-acc/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelCusAccDeleteRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelCusAccHTTPClientImpl) GetAllRelations(ctx context.Context, in *GetAllRelationsRequest, opts ...http.CallOption) (*GetAllRelationsReply, error) {
	var out GetAllRelationsReply
	pattern := "/v1/rel-cus-acc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelCusAccGetAllRelations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelCusAccHTTPClientImpl) GetRelationByAccount(ctx context.Context, in *GetRelationByAccountRequest, opts ...http.CallOption) (*GetRelationByAccountReply, error) {
	var out GetRelationByAccountReply
	pattern := "/v1/rel-cus-acc/account/{accountId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelCusAccGetRelationByAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelCusAccHTTPClientImpl) GetRelationsByCustomer(ctx context.Context, in *GetRelationsByCustomerRequest, opts ...http.CallOption) (*GetRelationsByCustomerReply, error) {
	var out GetRelationsByCustomerReply
	pattern := "/v1/rel-cus-acc/customer/{customerId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelCusAccGetRelationsByCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelCusAccHTTPClientImpl) UpdateRelation(ctx context.Context, in *UpdateRelationRequest, opts ...http.CallOption) (*UpdateRelationReply, error) {
	var out UpdateRelationReply
	pattern := "/v1/rel-cus-acc/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelCusAccUpdateRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

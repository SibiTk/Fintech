// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/helloworld/v1/rel_cus_acc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelCusAcc_CreateRelation_FullMethodName         = "/helloworld.v1.RelCusAcc/CreateRelation"
	RelCusAcc_UpdateRelation_FullMethodName         = "/helloworld.v1.RelCusAcc/UpdateRelation"
	RelCusAcc_DeleteRelation_FullMethodName         = "/helloworld.v1.RelCusAcc/DeleteRelation"
	RelCusAcc_GetRelationsByCustomer_FullMethodName = "/helloworld.v1.RelCusAcc/GetRelationsByCustomer"
	RelCusAcc_GetRelationByAccount_FullMethodName   = "/helloworld.v1.RelCusAcc/GetRelationByAccount"
	RelCusAcc_GetAllRelations_FullMethodName        = "/helloworld.v1.RelCusAcc/GetAllRelations"
)

// RelCusAccClient is the client API for RelCusAcc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelCusAccClient interface {
	// Create a new customer-account relationship
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationReply, error)
	// Update customer-account relationship
	UpdateRelation(ctx context.Context, in *UpdateRelationRequest, opts ...grpc.CallOption) (*UpdateRelationReply, error)
	// Delete relationship by ID
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationReply, error)
	// Get all relationships by customer ID
	GetRelationsByCustomer(ctx context.Context, in *GetRelationsByCustomerRequest, opts ...grpc.CallOption) (*GetRelationsByCustomerReply, error)
	// Get relationship by account ID
	GetRelationByAccount(ctx context.Context, in *GetRelationByAccountRequest, opts ...grpc.CallOption) (*GetRelationByAccountReply, error)
	// Get all relationships
	GetAllRelations(ctx context.Context, in *GetAllRelationsRequest, opts ...grpc.CallOption) (*GetAllRelationsReply, error)
}

type relCusAccClient struct {
	cc grpc.ClientConnInterface
}

func NewRelCusAccClient(cc grpc.ClientConnInterface) RelCusAccClient {
	return &relCusAccClient{cc}
}

func (c *relCusAccClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRelationReply)
	err := c.cc.Invoke(ctx, RelCusAcc_CreateRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relCusAccClient) UpdateRelation(ctx context.Context, in *UpdateRelationRequest, opts ...grpc.CallOption) (*UpdateRelationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRelationReply)
	err := c.cc.Invoke(ctx, RelCusAcc_UpdateRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relCusAccClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRelationReply)
	err := c.cc.Invoke(ctx, RelCusAcc_DeleteRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relCusAccClient) GetRelationsByCustomer(ctx context.Context, in *GetRelationsByCustomerRequest, opts ...grpc.CallOption) (*GetRelationsByCustomerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationsByCustomerReply)
	err := c.cc.Invoke(ctx, RelCusAcc_GetRelationsByCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relCusAccClient) GetRelationByAccount(ctx context.Context, in *GetRelationByAccountRequest, opts ...grpc.CallOption) (*GetRelationByAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationByAccountReply)
	err := c.cc.Invoke(ctx, RelCusAcc_GetRelationByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relCusAccClient) GetAllRelations(ctx context.Context, in *GetAllRelationsRequest, opts ...grpc.CallOption) (*GetAllRelationsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRelationsReply)
	err := c.cc.Invoke(ctx, RelCusAcc_GetAllRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelCusAccServer is the server API for RelCusAcc service.
// All implementations must embed UnimplementedRelCusAccServer
// for forward compatibility.
type RelCusAccServer interface {
	// Create a new customer-account relationship
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationReply, error)
	// Update customer-account relationship
	UpdateRelation(context.Context, *UpdateRelationRequest) (*UpdateRelationReply, error)
	// Delete relationship by ID
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationReply, error)
	// Get all relationships by customer ID
	GetRelationsByCustomer(context.Context, *GetRelationsByCustomerRequest) (*GetRelationsByCustomerReply, error)
	// Get relationship by account ID
	GetRelationByAccount(context.Context, *GetRelationByAccountRequest) (*GetRelationByAccountReply, error)
	// Get all relationships
	GetAllRelations(context.Context, *GetAllRelationsRequest) (*GetAllRelationsReply, error)
	mustEmbedUnimplementedRelCusAccServer()
}

// UnimplementedRelCusAccServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelCusAccServer struct{}

func (UnimplementedRelCusAccServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedRelCusAccServer) UpdateRelation(context.Context, *UpdateRelationRequest) (*UpdateRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelation not implemented")
}
func (UnimplementedRelCusAccServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedRelCusAccServer) GetRelationsByCustomer(context.Context, *GetRelationsByCustomerRequest) (*GetRelationsByCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationsByCustomer not implemented")
}
func (UnimplementedRelCusAccServer) GetRelationByAccount(context.Context, *GetRelationByAccountRequest) (*GetRelationByAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationByAccount not implemented")
}
func (UnimplementedRelCusAccServer) GetAllRelations(context.Context, *GetAllRelationsRequest) (*GetAllRelationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelations not implemented")
}
func (UnimplementedRelCusAccServer) mustEmbedUnimplementedRelCusAccServer() {}
func (UnimplementedRelCusAccServer) testEmbeddedByValue()                   {}

// UnsafeRelCusAccServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelCusAccServer will
// result in compilation errors.
type UnsafeRelCusAccServer interface {
	mustEmbedUnimplementedRelCusAccServer()
}

func RegisterRelCusAccServer(s grpc.ServiceRegistrar, srv RelCusAccServer) {
	// If the following call pancis, it indicates UnimplementedRelCusAccServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelCusAcc_ServiceDesc, srv)
}

func _RelCusAcc_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelCusAcc_UpdateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).UpdateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_UpdateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).UpdateRelation(ctx, req.(*UpdateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelCusAcc_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_DeleteRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelCusAcc_GetRelationsByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationsByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).GetRelationsByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_GetRelationsByCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).GetRelationsByCustomer(ctx, req.(*GetRelationsByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelCusAcc_GetRelationByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).GetRelationByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_GetRelationByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).GetRelationByAccount(ctx, req.(*GetRelationByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelCusAcc_GetAllRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelCusAccServer).GetAllRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelCusAcc_GetAllRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelCusAccServer).GetAllRelations(ctx, req.(*GetAllRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelCusAcc_ServiceDesc is the grpc.ServiceDesc for RelCusAcc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelCusAcc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.RelCusAcc",
	HandlerType: (*RelCusAccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelation",
			Handler:    _RelCusAcc_CreateRelation_Handler,
		},
		{
			MethodName: "UpdateRelation",
			Handler:    _RelCusAcc_UpdateRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _RelCusAcc_DeleteRelation_Handler,
		},
		{
			MethodName: "GetRelationsByCustomer",
			Handler:    _RelCusAcc_GetRelationsByCustomer_Handler,
		},
		{
			MethodName: "GetRelationByAccount",
			Handler:    _RelCusAcc_GetRelationByAccount_Handler,
		},
		{
			MethodName: "GetAllRelations",
			Handler:    _RelCusAcc_GetAllRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/rel_cus_acc.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountBlockServiceGetAccBlock = "/helloworld.v1.AccountBlockService/GetAccBlock"
const OperationAccountBlockServiceSaveAccBlock = "/helloworld.v1.AccountBlockService/SaveAccBlock"
const OperationAccountBlockServiceUpdateAccBlock = "/helloworld.v1.AccountBlockService/UpdateAccBlock"

type AccountBlockServiceHTTPServer interface {
	GetAccBlock(context.Context, *GetAccBlockRequest) (*GetAccBlockReply, error)
	SaveAccBlock(context.Context, *SaveAccBlockRequest) (*SaveAccBlockReply, error)
	UpdateAccBlock(context.Context, *UpdateAccBlockRequest) (*UpdateAccBlockReply, error)
}

func RegisterAccountBlockServiceHTTPServer(s *http.Server, srv AccountBlockServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/SaveAccBlock", _AccountBlockService_SaveAccBlock0_HTTP_Handler(srv))
	r.GET("/v1/GetAccBlock/{customer_id}", _AccountBlockService_GetAccBlock0_HTTP_Handler(srv))
	r.PUT("/v1/UpdateAccBlock/{customer_id}", _AccountBlockService_UpdateAccBlock0_HTTP_Handler(srv))
}

func _AccountBlockService_SaveAccBlock0_HTTP_Handler(srv AccountBlockServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveAccBlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountBlockServiceSaveAccBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveAccBlock(ctx, req.(*SaveAccBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveAccBlockReply)
		return ctx.Result(200, reply)
	}
}

func _AccountBlockService_GetAccBlock0_HTTP_Handler(srv AccountBlockServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccBlockRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountBlockServiceGetAccBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccBlock(ctx, req.(*GetAccBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccBlockReply)
		return ctx.Result(200, reply)
	}
}

func _AccountBlockService_UpdateAccBlock0_HTTP_Handler(srv AccountBlockServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccBlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountBlockServiceUpdateAccBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccBlock(ctx, req.(*UpdateAccBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccBlockReply)
		return ctx.Result(200, reply)
	}
}

type AccountBlockServiceHTTPClient interface {
	GetAccBlock(ctx context.Context, req *GetAccBlockRequest, opts ...http.CallOption) (rsp *GetAccBlockReply, err error)
	SaveAccBlock(ctx context.Context, req *SaveAccBlockRequest, opts ...http.CallOption) (rsp *SaveAccBlockReply, err error)
	UpdateAccBlock(ctx context.Context, req *UpdateAccBlockRequest, opts ...http.CallOption) (rsp *UpdateAccBlockReply, err error)
}

type AccountBlockServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountBlockServiceHTTPClient(client *http.Client) AccountBlockServiceHTTPClient {
	return &AccountBlockServiceHTTPClientImpl{client}
}

func (c *AccountBlockServiceHTTPClientImpl) GetAccBlock(ctx context.Context, in *GetAccBlockRequest, opts ...http.CallOption) (*GetAccBlockReply, error) {
	var out GetAccBlockReply
	pattern := "/v1/GetAccBlock/{customer_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountBlockServiceGetAccBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountBlockServiceHTTPClientImpl) SaveAccBlock(ctx context.Context, in *SaveAccBlockRequest, opts ...http.CallOption) (*SaveAccBlockReply, error) {
	var out SaveAccBlockReply
	pattern := "/v1/SaveAccBlock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountBlockServiceSaveAccBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountBlockServiceHTTPClientImpl) UpdateAccBlock(ctx context.Context, in *UpdateAccBlockRequest, opts ...http.CallOption) (*UpdateAccBlockReply, error) {
	var out UpdateAccBlockReply
	pattern := "/v1/UpdateAccBlock/{customer_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountBlockServiceUpdateAccBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

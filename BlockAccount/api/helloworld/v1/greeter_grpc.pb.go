// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountBlockService_SaveAccBlock_FullMethodName   = "/helloworld.v1.AccountBlockService/SaveAccBlock"
	AccountBlockService_GetAccBlock_FullMethodName    = "/helloworld.v1.AccountBlockService/GetAccBlock"
	AccountBlockService_UpdateAccBlock_FullMethodName = "/helloworld.v1.AccountBlockService/UpdateAccBlock"
)

// AccountBlockServiceClient is the client API for AccountBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type AccountBlockServiceClient interface {
	SaveAccBlock(ctx context.Context, in *SaveAccBlockRequest, opts ...grpc.CallOption) (*SaveAccBlockReply, error)
	GetAccBlock(ctx context.Context, in *GetAccBlockRequest, opts ...grpc.CallOption) (*GetAccBlockReply, error)
	UpdateAccBlock(ctx context.Context, in *UpdateAccBlockRequest, opts ...grpc.CallOption) (*UpdateAccBlockReply, error)
}

type accountBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountBlockServiceClient(cc grpc.ClientConnInterface) AccountBlockServiceClient {
	return &accountBlockServiceClient{cc}
}

func (c *accountBlockServiceClient) SaveAccBlock(ctx context.Context, in *SaveAccBlockRequest, opts ...grpc.CallOption) (*SaveAccBlockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAccBlockReply)
	err := c.cc.Invoke(ctx, AccountBlockService_SaveAccBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountBlockServiceClient) GetAccBlock(ctx context.Context, in *GetAccBlockRequest, opts ...grpc.CallOption) (*GetAccBlockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccBlockReply)
	err := c.cc.Invoke(ctx, AccountBlockService_GetAccBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountBlockServiceClient) UpdateAccBlock(ctx context.Context, in *UpdateAccBlockRequest, opts ...grpc.CallOption) (*UpdateAccBlockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccBlockReply)
	err := c.cc.Invoke(ctx, AccountBlockService_UpdateAccBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountBlockServiceServer is the server API for AccountBlockService service.
// All implementations must embed UnimplementedAccountBlockServiceServer
// for forward compatibility.
//
// The greeting service definition.
type AccountBlockServiceServer interface {
	SaveAccBlock(context.Context, *SaveAccBlockRequest) (*SaveAccBlockReply, error)
	GetAccBlock(context.Context, *GetAccBlockRequest) (*GetAccBlockReply, error)
	UpdateAccBlock(context.Context, *UpdateAccBlockRequest) (*UpdateAccBlockReply, error)
	mustEmbedUnimplementedAccountBlockServiceServer()
}

// UnimplementedAccountBlockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountBlockServiceServer struct{}

func (UnimplementedAccountBlockServiceServer) SaveAccBlock(context.Context, *SaveAccBlockRequest) (*SaveAccBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAccBlock not implemented")
}
func (UnimplementedAccountBlockServiceServer) GetAccBlock(context.Context, *GetAccBlockRequest) (*GetAccBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccBlock not implemented")
}
func (UnimplementedAccountBlockServiceServer) UpdateAccBlock(context.Context, *UpdateAccBlockRequest) (*UpdateAccBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccBlock not implemented")
}
func (UnimplementedAccountBlockServiceServer) mustEmbedUnimplementedAccountBlockServiceServer() {}
func (UnimplementedAccountBlockServiceServer) testEmbeddedByValue()                             {}

// UnsafeAccountBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountBlockServiceServer will
// result in compilation errors.
type UnsafeAccountBlockServiceServer interface {
	mustEmbedUnimplementedAccountBlockServiceServer()
}

func RegisterAccountBlockServiceServer(s grpc.ServiceRegistrar, srv AccountBlockServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountBlockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountBlockService_ServiceDesc, srv)
}

func _AccountBlockService_SaveAccBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAccBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountBlockServiceServer).SaveAccBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountBlockService_SaveAccBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountBlockServiceServer).SaveAccBlock(ctx, req.(*SaveAccBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountBlockService_GetAccBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountBlockServiceServer).GetAccBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountBlockService_GetAccBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountBlockServiceServer).GetAccBlock(ctx, req.(*GetAccBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountBlockService_UpdateAccBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountBlockServiceServer).UpdateAccBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountBlockService_UpdateAccBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountBlockServiceServer).UpdateAccBlock(ctx, req.(*UpdateAccBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountBlockService_ServiceDesc is the grpc.ServiceDesc for AccountBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.AccountBlockService",
	HandlerType: (*AccountBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveAccBlock",
			Handler:    _AccountBlockService_SaveAccBlock_Handler,
		},
		{
			MethodName: "GetAccBlock",
			Handler:    _AccountBlockService_GetAccBlock_Handler,
		},
		{
			MethodName: "UpdateAccBlock",
			Handler:    _AccountBlockService_UpdateAccBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/greeter.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/card.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCardCreateCard = "/helloworld.v1.Card/CreateCard"
const OperationCardDeleteCard = "/helloworld.v1.Card/DeleteCard"
const OperationCardDisplayCard = "/helloworld.v1.Card/DisplayCard"
const OperationCardUpdateCard = "/helloworld.v1.Card/UpdateCard"

type CardHTTPServer interface {
	CreateCard(context.Context, *CreateRequest) (*CreateReply, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardReply, error)
	DisplayCard(context.Context, *FindByIdRequest) (*FindByIdReply, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardReply, error)
}

func RegisterCardHTTPServer(s *http.Server, srv CardHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/helloworld/card", _Card_CreateCard0_HTTP_Handler(srv))
	r.PATCH("/v1/helloworld/card/{cardId}", _Card_UpdateCard0_HTTP_Handler(srv))
	r.DELETE("/v1/helloworld/card/{cardId}", _Card_DeleteCard0_HTTP_Handler(srv))
	r.GET("/v1/helloworld/card/{cardId}", _Card_DisplayCard0_HTTP_Handler(srv))
}

func _Card_CreateCard0_HTTP_Handler(srv CardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCardCreateCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCard(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _Card_UpdateCard0_HTTP_Handler(srv CardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCardUpdateCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCard(ctx, req.(*UpdateCardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCardReply)
		return ctx.Result(200, reply)
	}
}

func _Card_DeleteCard0_HTTP_Handler(srv CardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCardDeleteCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCard(ctx, req.(*DeleteCardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCardReply)
		return ctx.Result(200, reply)
	}
}

func _Card_DisplayCard0_HTTP_Handler(srv CardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCardDisplayCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisplayCard(ctx, req.(*FindByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindByIdReply)
		return ctx.Result(200, reply)
	}
}

type CardHTTPClient interface {
	CreateCard(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	DeleteCard(ctx context.Context, req *DeleteCardRequest, opts ...http.CallOption) (rsp *DeleteCardReply, err error)
	DisplayCard(ctx context.Context, req *FindByIdRequest, opts ...http.CallOption) (rsp *FindByIdReply, err error)
	UpdateCard(ctx context.Context, req *UpdateCardRequest, opts ...http.CallOption) (rsp *UpdateCardReply, err error)
}

type CardHTTPClientImpl struct {
	cc *http.Client
}

func NewCardHTTPClient(client *http.Client) CardHTTPClient {
	return &CardHTTPClientImpl{client}
}

func (c *CardHTTPClientImpl) CreateCard(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/v1/helloworld/card"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCardCreateCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CardHTTPClientImpl) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...http.CallOption) (*DeleteCardReply, error) {
	var out DeleteCardReply
	pattern := "/v1/helloworld/card/{cardId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCardDeleteCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CardHTTPClientImpl) DisplayCard(ctx context.Context, in *FindByIdRequest, opts ...http.CallOption) (*FindByIdReply, error) {
	var out FindByIdReply
	pattern := "/v1/helloworld/card/{cardId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCardDisplayCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CardHTTPClientImpl) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...http.CallOption) (*UpdateCardReply, error) {
	var out UpdateCardReply
	pattern := "/v1/helloworld/card/{cardId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCardUpdateCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

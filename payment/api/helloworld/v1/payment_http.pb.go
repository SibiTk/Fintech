// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/payment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPaymentCreatePayment = "/payments.v1.Payment/CreatePayment"
const OperationPaymentDeletePayment = "/payments.v1.Payment/DeletePayment"
const OperationPaymentDisplayPayment = "/payments.v1.Payment/DisplayPayment"
const OperationPaymentUpdatePayment = "/payments.v1.Payment/UpdatePayment"

type PaymentHTTPServer interface {
	// CreatePayment Payment endpoints
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentReply, error)
	DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentReply, error)
	DisplayPayment(context.Context, *FindPaymentByIdRequest) (*FindPaymentByIdReply, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentReply, error)
}

func RegisterPaymentHTTPServer(s *http.Server, srv PaymentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/payments", _Payment_CreatePayment0_HTTP_Handler(srv))
	r.PATCH("/v1/payments/{payment_id}", _Payment_UpdatePayment0_HTTP_Handler(srv))
	r.DELETE("/v1/payments/{payment_id}", _Payment_DeletePayment0_HTTP_Handler(srv))
	r.GET("/v1/payments/{payment_id}", _Payment_DisplayPayment0_HTTP_Handler(srv))
}

func _Payment_CreatePayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentCreatePayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePayment(ctx, req.(*CreatePaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_UpdatePayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentUpdatePayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePayment(ctx, req.(*UpdatePaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePaymentReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_DeletePayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePaymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentDeletePayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePayment(ctx, req.(*DeletePaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePaymentReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_DisplayPayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindPaymentByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentDisplayPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisplayPayment(ctx, req.(*FindPaymentByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindPaymentByIdReply)
		return ctx.Result(200, reply)
	}
}

type PaymentHTTPClient interface {
	CreatePayment(ctx context.Context, req *CreatePaymentRequest, opts ...http.CallOption) (rsp *CreatePaymentReply, err error)
	DeletePayment(ctx context.Context, req *DeletePaymentRequest, opts ...http.CallOption) (rsp *DeletePaymentReply, err error)
	DisplayPayment(ctx context.Context, req *FindPaymentByIdRequest, opts ...http.CallOption) (rsp *FindPaymentByIdReply, err error)
	UpdatePayment(ctx context.Context, req *UpdatePaymentRequest, opts ...http.CallOption) (rsp *UpdatePaymentReply, err error)
}

type PaymentHTTPClientImpl struct {
	cc *http.Client
}

func NewPaymentHTTPClient(client *http.Client) PaymentHTTPClient {
	return &PaymentHTTPClientImpl{client}
}

func (c *PaymentHTTPClientImpl) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...http.CallOption) (*CreatePaymentReply, error) {
	var out CreatePaymentReply
	pattern := "/v1/payments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentCreatePayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...http.CallOption) (*DeletePaymentReply, error) {
	var out DeletePaymentReply
	pattern := "/v1/payments/{payment_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentDeletePayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) DisplayPayment(ctx context.Context, in *FindPaymentByIdRequest, opts ...http.CallOption) (*FindPaymentByIdReply, error) {
	var out FindPaymentByIdReply
	pattern := "/v1/payments/{payment_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentDisplayPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...http.CallOption) (*UpdatePaymentReply, error) {
	var out UpdatePaymentReply
	pattern := "/v1/payments/{payment_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentUpdatePayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

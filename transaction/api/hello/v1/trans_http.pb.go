// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/hello/v1/trans.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionCreateTransaction = "/helloworld.v1.Transaction/CreateTransaction"
const OperationTransactionDeleteTransaction = "/helloworld.v1.Transaction/DeleteTransaction"
const OperationTransactionDisplayTransaction = "/helloworld.v1.Transaction/DisplayTransaction"
const OperationTransactionUpdateTransaction = "/helloworld.v1.Transaction/UpdateTransaction"

type TransactionHTTPServer interface {
	// CreateTransaction Transaction endpoints
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionReply, error)
	DisplayTransaction(context.Context, *FindTransactionByIdRequest) (*FindTransactionByIdReply, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionReply, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/helloworld/transaction", _Transaction_CreateTransaction0_HTTP_Handler(srv))
	r.PATCH("/v1/helloworld/transaction/{transaction_id}", _Transaction_UpdateTransaction0_HTTP_Handler(srv))
	r.DELETE("/v1/helloworld/transaction/{transaction_id}", _Transaction_DeleteTransaction0_HTTP_Handler(srv))
	r.GET("/v1/helloworld/transaction/{transaction_id}", _Transaction_DisplayTransaction0_HTTP_Handler(srv))
}

func _Transaction_CreateTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionCreateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTransaction(ctx, req.(*CreateTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_UpdateTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionUpdateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_DeleteTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTransactionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionDeleteTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTransactionReply)
		return ctx.Result(200, reply)
	}
}

func _Transaction_DisplayTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindTransactionByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionDisplayTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisplayTransaction(ctx, req.(*FindTransactionByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindTransactionByIdReply)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	CreateTransaction(ctx context.Context, req *CreateTransactionRequest, opts ...http.CallOption) (rsp *CreateTransactionReply, err error)
	DeleteTransaction(ctx context.Context, req *DeleteTransactionRequest, opts ...http.CallOption) (rsp *DeleteTransactionReply, err error)
	DisplayTransaction(ctx context.Context, req *FindTransactionByIdRequest, opts ...http.CallOption) (rsp *FindTransactionByIdReply, err error)
	UpdateTransaction(ctx context.Context, req *UpdateTransactionRequest, opts ...http.CallOption) (rsp *UpdateTransactionReply, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...http.CallOption) (*CreateTransactionReply, error) {
	var out CreateTransactionReply
	pattern := "/v1/helloworld/transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionCreateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...http.CallOption) (*DeleteTransactionReply, error) {
	var out DeleteTransactionReply
	pattern := "/v1/helloworld/transaction/{transaction_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionDeleteTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) DisplayTransaction(ctx context.Context, in *FindTransactionByIdRequest, opts ...http.CallOption) (*FindTransactionByIdReply, error) {
	var out FindTransactionByIdReply
	pattern := "/v1/helloworld/transaction/{transaction_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTransactionDisplayTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...http.CallOption) (*UpdateTransactionReply, error) {
	var out UpdateTransactionReply
	pattern := "/v1/helloworld/transaction/{transaction_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionUpdateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/account.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountCreateAccount = "/helloworld.v1.Account/CreateAccount"
const OperationAccountDeleteAccount = "/helloworld.v1.Account/DeleteAccount"
const OperationAccountGetAccountWithId = "/helloworld.v1.Account/GetAccountWithId"
const OperationAccountGetCustomerWithId = "/helloworld.v1.Account/GetCustomerWithId"
const OperationAccountUpdateAccount = "/helloworld.v1.Account/UpdateAccount"

type AccountHTTPServer interface {
	// CreateAccount Create a new account
	CreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	// DeleteAccount Delete account by customer ID
	DeleteAccount(context.Context, *DeleteRequest) (*DeleteReply, error)
	// GetAccountWithId Get account by account ID
	GetAccountWithId(context.Context, *AccountIdRequest) (*AccountIdReply, error)
	// GetCustomerWithId Get all accounts by customer ID
	GetCustomerWithId(context.Context, *GetCustomerWithIdRequest) (*GetCustomerWithIdReply, error)
	// UpdateAccount Update account by customer ID
	UpdateAccount(context.Context, *UpdateRequest) (*UpdateReply, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/account", _Account_CreateAccount0_HTTP_Handler(srv))
	r.PATCH("/v1/account/{customerId}", _Account_UpdateAccount0_HTTP_Handler(srv))
	r.DELETE("/v1/account/{customerId}", _Account_DeleteAccount0_HTTP_Handler(srv))
	r.GET("/v1/account/{customerId}", _Account_GetCustomerWithId0_HTTP_Handler(srv))
	r.GET("/v1/account/{accountId}", _Account_GetAccountWithId0_HTTP_Handler(srv))
}

func _Account_CreateAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountCreateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccount(ctx, req.(*AccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountDeleteAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccount(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReply)
		return ctx.Result(200, reply)
	}
}

func _Account_GetCustomerWithId0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustomerWithIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetCustomerWithId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomerWithId(ctx, req.(*GetCustomerWithIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustomerWithIdReply)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccountWithId0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetAccountWithId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountWithId(ctx, req.(*AccountIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountIdReply)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	CreateAccount(ctx context.Context, req *AccountRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	DeleteAccount(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *DeleteReply, err error)
	GetAccountWithId(ctx context.Context, req *AccountIdRequest, opts ...http.CallOption) (rsp *AccountIdReply, err error)
	GetCustomerWithId(ctx context.Context, req *GetCustomerWithIdRequest, opts ...http.CallOption) (rsp *GetCustomerWithIdReply, err error)
	UpdateAccount(ctx context.Context, req *UpdateRequest, opts ...http.CallOption) (rsp *UpdateReply, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) CreateAccount(ctx context.Context, in *AccountRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/v1/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountCreateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) DeleteAccount(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*DeleteReply, error) {
	var out DeleteReply
	pattern := "/v1/account/{customerId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountDeleteAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) GetAccountWithId(ctx context.Context, in *AccountIdRequest, opts ...http.CallOption) (*AccountIdReply, error) {
	var out AccountIdReply
	pattern := "/v1/account/{accountId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountGetAccountWithId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) GetCustomerWithId(ctx context.Context, in *GetCustomerWithIdRequest, opts ...http.CallOption) (*GetCustomerWithIdReply, error) {
	var out GetCustomerWithIdReply
	pattern := "/v1/account/{customerId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountGetCustomerWithId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateRequest, opts ...http.CallOption) (*UpdateReply, error) {
	var out UpdateReply
	pattern := "/v1/account/{customerId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
